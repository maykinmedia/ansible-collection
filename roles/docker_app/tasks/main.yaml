---
- name: Derive docker_app_image variable
  ansible.builtin.set_fact:
    docker_app_image: "{{ docker_app_image_registry }}/{{ docker_app_image_name }}:{{ docker_app_image_version }}"
  when: docker_app_image is not defined or docker_app_image == None

- name: Create the application group '{{ docker_app_user }}'
  ansible.builtin.group:
    name: "{{ docker_app_user }}"

- name: Create the application user
  ansible.builtin.user:
    name: "{{ docker_app_user }}"
    state: present
    group: "{{ docker_app_user }}"
    comment: "{{ docker_app_user }} application user"
    create_home: true
  register: _docker_app_user

- name: Template out the .env file
  ansible.builtin.template:
    src: "{{ docker_app_env_template }}"
    dest: "{{ _docker_app_user.home }}/dotenv"
    owner: "{{ docker_app_user }}"
    group: "{{ docker_app_user }}"
    mode: u=rw,g=r,o=
  register: _docker_env_file

- name: Add docker volumes
  community.docker.docker_volume:
    volume_name: "{{ docker_app_volume.name | mandatory }}"
  loop: "{{ docker_app_create_volumes.volumes }}"
  loop_control:
    loop_var: docker_app_volume
  # This is only needed if we are not mounting an existing directory
  when: docker_app_create_volumes.enabled

- name: Provision the isolated app container network
  community.docker.docker_network:
    name: "{{ docker_app_name_prefix }}"
    internal: "{{ docker_app_network_internal }}"

- name: Copy free ports script to host
  ansible.builtin.copy:
    content: |
      #!/usr/bin/python3
      import socket
      for p in range({{ docker_app_port_range.start }},{{ docker_app_port_range.end }}):
          import socket
          s = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
          try:
            s.bind(("",p))
          except:
              pass
          port = s.getsockname()[1]
          s.close()
          if port != 0:
            print(p)
    dest: /tmp/freeports.py
    mode: "0700"

- name: Generate list of free ports
  ansible.builtin.command: python3 /tmp/freeports.py
  register: _docker_freeports
  no_log: true
  changed_when: false

- name: Check if app containers already exists
  community.docker.docker_container_info:
    name: "{{ docker_app_name_prefix }}-{{ docker_app_counter }}"
  loop: "{{ range(docker_app_replicas) | list }}"
  loop_control:
    loop_var: docker_app_counter
  register: _docker_app_container_info

- name: Make list of container names
  ansible.builtin.set_fact:
    _app_container_replicas_names: "{{ _app_container_replicas_names | default([]) + [[docker_app_name_prefix, docker_app_counter] | join('-')] }}"
  loop: "{{ range(docker_app_replicas) | list }}"
  loop_control:
    loop_var: docker_app_counter

# For each container, either take the port on which it is running or take one of the free ports
- name: Make list of ports for the containers
  ansible.builtin.set_fact:
    _app_container_replica_ports: "{{ _app_container_replica_ports | default([]) + [
    _docker_app_container_info.results[docker_app_counter].exists | ternary(
    _docker_app_container_info.results[docker_app_counter].container.HostConfig.PortBindings[[app_port,
      'tcp'] | join('/')][0].HostPort, _docker_freeports.stdout_lines[docker_app_counter])] }}"
  loop: "{{ range(docker_app_replicas) | list }}"
  loop_control:
    loop_var: docker_app_counter

- name: Run the app containers
  community.docker.docker_container:
    container_default_behavior: no_defaults
    name: "{{ _app_container_replicas_names[docker_app_counter] }}"
    image: "{{ docker_app_image | mandatory }}"
    hostname: "{{ _app_container_replicas_names[docker_app_counter] }}"
    state: "{{ docker_app_state }}"
    pull: true # always pull
    restart: "{{ _docker_env_file.changed }}"
    restart_policy: always
    networks:
      - name: "{{ docker_app_name_prefix }}"
    networks_cli_compatible: true

    healthcheck: "{{ docker_app_healthcheck | default({}) }}"

    privileged: false
    log_driver: json-file
    log_options:
      max-size: 10m
      max-file: "10"

    env_file: "{{ _docker_app_user.home }}/dotenv"

    memory: "{{ docker_app_memory_limit }}"
    memory_swap: "{{ docker_app_swap_memory_limit }}"
    cpus: "{{ docker_app_cpu_limit }}"

    volumes: "{{ docker_app_volumes_mounts | default([]) }}"

    published_ports:
      - "127.0.0.1:{{ _app_container_replica_ports[docker_app_counter] }}:{{ app_port }}"
    comparisons:
      env: strict
      volumes: strict
  loop: "{{ range(docker_app_replicas) | list }}"
  loop_control:
    loop_var: docker_app_counter
    pause: "{{ docker_app_replicas_loop_pause }}"
  register: backend_ports

- name: Clear docker image variable
  ansible.builtin.set_fact:
    docker_app_image:
  when: docker_app_image is defined
