---

#######################################
#                                     #
# General namespacing/Django settings #
#                                     #
#######################################

# prefix to use for container, network, volume... names
django_app_docker_name_prefix: app

# Application linux user (.dotenv is created in home dir of this user)
# Override if django_app_docker_name_prefix is too long (>31 characters)
django_app_docker_app_user: "{{ django_app_docker_name_prefix }}"

# domain where the app is deployed. Used in the ALLOWED_HOSTS setting
django_app_docker_domain: "app.example.com"
django_app_docker_https: true

django_app_docker_secret_key: override-me

# list of allowed hosts
django_app_docker_allowed_hosts:
  - localhost
  - "127.0.0.1"
  - "{{ django_app_docker_domain }}"
  - "www.{{ django_app_docker_domain }}"

# Database connection parameters
django_app_docker_db_engine: "django.db.backends.postgresql"
django_app_docker_db_host: /var/run/postgresql/ # use a proper TCP host or mount /var/run/postgresql for unix socket
django_app_docker_db_port: 5432
django_app_docker_db_name: django_app # override this!
django_app_docker_db_username: django_app # override this!
django_app_docker_db_password: django_app # override this!

# Any additional databases that need to be configured.
# Format:
#
#   PREFIX:
#     host: db1.example.com
#     name: example
#     username: extra-user
#     password: sekret
#
#  This results in the envvars PREFIX_DB_HOST, PREFIX_DB_NAME...
django_app_docker_extra_dbs: {}
# Redis cache
django_app_docker_cache_image: docker.io/library/redis:6
django_app_docker_cache_db: 0 # change this if you're using a shared redis instance
django_app_docker_extra_caches: []
# Elasticsearch
django_app_docker_elasticsearch_image: docker.elastic.co/elasticsearch/elasticsearch:8.13.3
django_app_docker_use_elasticsearch: false
django_app_docker_elasticsearch_env:
  discovery.type: "single-node"
  xpack.security.enabled: "false"
  ES_JAVA_OPTS: "-Xms512m -Xmx512m"

django_app_docker_elasticsearch_memory_limit: 0
django_app_docker_elasticsearch_memory_swap_limit: 0
django_app_docker_elasticsearch_cpus: 0

# Error monitoring - Sentry integration. Disabled by default, set a value to opt-in.
django_app_docker_sentry_dsn:
# Name of the python package containing the app, found in the `src/` directory
# of the project.
django_app_docker_package_name: "{{ django_app_docker_name_prefix }}"

#######################################
#                                     #
# Container image definition          #
#                                     #
#######################################

# Container image version to use
django_app_docker_version: latest # use a tag
django_app_docker_sha256: # or use a sha256 hash

# Container registry
django_app_docker_image_registry: docker.io # use Docker Hub by default
# Image repository. Combined with `django_app_docker_image_registry` and
# `django_app_docker_version` or `django_app_docker_sha256`, this leads to a fully
# qualified image reference.
django_app_docker_image_name: "maykinmedia/{{ django_app_docker_name_prefix }}"
# `django_app_docker_image` is derived automatically from the above variables

# Define the state of the containers, used for all containers,
# see https://docs.ansible.com/ansible/latest/collections/community/docker/docker_container_module.html#parameter-state
# Does not impact the docker volumes and networks tasks
django_app_docker_state: started

django_app_docker_image_always_pull: false

django_app_docker_enable_healthcheck: false
django_app_docker_healthcheck:
  test:
    - "CMD"
    - "python"
    - "-c"
    - "import requests; exit(requests.get('http://localhost:8000/admin').status_code != 200)"
  interval: 30s
  timeout: 5s
  retries: 3
  start_period: 10s

#######################################
#                                     #
# Host system interface               #
#                                     #
#######################################

# List of packages to install on the host system, empty list will skip the task
django_app_docker_dependencies:
  - python3-docker

# Number of desired running web backend containers.
django_app_docker_replicas: 1
# Number of seconds to wait between deploying replicas, this can be used to prevent downtime.
django_app_docker_replicas_loop_pause: 1
# Backend ports to expose to NGINX, free ports in this range will be assigned to the host port
django_app_docker_port_range:
  start: 14000
  end: 15000

# Set to 'compatibility' to restore defaults,
# For more info, see:
# https://docs.ansible.com/ansible/latest/collections/community/docker/docker_container_module.html#parameter-container_default_behavior
django_app_docker_container_default_behavior: no_defaults

# Configure container memory limits, both memory and swap_limit need to be set,
# For more info, see:
# https://docs.docker.com/config/containers/resource_constraints/#--memory-swap-details
django_app_docker_memory_limit: 0
django_app_docker_memory_swap_limit: 0

django_app_docker_celery_memory_limit: 0
django_app_docker_celery_memory_swap_limit: 0

django_app_docker_celery_beat_memory_limit: 0
django_app_docker_celery_beat_memory_swap_limit: 0

# Configure container cpu limit (A value of 1.5 means that at most one and a half CPU (core) will be used)
django_app_docker_cpus: 0
django_app_docker_celery_cpus: 0
django_app_docker_celery_beat_cpus: 0

# Set to true to restrict external access to the network
django_app_docker_network_internal: false

# Which volumes to create and where to mount them with which mode (rw, ro).
# Typically created under /var/lib/docker/volumes, ensure you have sufficient disk
# space.
django_app_docker_volumes:
  - name: "{{ django_app_docker_name_prefix }}-media"
    mount: "/app/media"
    # hostPath: ''  # optional to bind-mount instead of creating a docker volume
    mode: "rw"
    owner: 1000

# Bind-mount the database socket directory
django_app_docker_db_bind_mount: /var/run/postgresql/

# This is the user on the HOST system. Find out which UID is used in the container
# (usually 1000 for Maykin projects), then look up which user has this UID on the host
# system.
django_app_docker_container_user: maykin

#######################################
#                                     #
# Celery integration                  #
#                                     #
#######################################

# Global toggles - set to `true` to have other variables have effect
django_app_docker_use_celery: false
django_app_docker_use_celery_beat: false
django_app_docker_use_flower: false
django_app_docker_use_celery_monitor: false

# Command to run when starting the celery container, useful if containers are build with e.g. '/celery_start.sh'
django_app_docker_celery_command: /celery_worker.sh
django_app_docker_celery_monitor_command: /celery_monitor.sh

# Which redis DB to use as broker/result backend
django_app_docker_celery_db: 1 # uses the same redis instance as cache service
django_app_docker_broker_url: "redis://{{ django_app_docker_name_prefix }}-redis:6379/{{ django_app_docker_celery_db }}"
django_app_docker_result_backend: "{{ django_app_docker_broker_url }}"

# RabbitMQ
django_app_docker_use_rabbitmq: false
django_app_docker_rabbitmq_image: rabbitmq:3.7
django_app_docker_rabbitmq_user: rabbit
django_app_docker_rabbitmq_pass: rabbit

# container stop sends TERM for graceful termination, after this grace period, a KILL
# is issued. You should set this per worker with the maximum duration of a task (should
# be slightly higher than the task timeout)
django_app_docker_celery_workers_default_grace_time: 30 # in seconds

# Default amount of worker containers. Note that each container can spawn one or more
# worker processes.
django_app_docker_celery_workers_default_replicas: 2

# Definition of worker queues. The default queue is named 'celery'
django_app_docker_celery_workers:
  - queue: celery
    replicas: "{{ django_app_docker_celery_workers_default_replicas }}"
    grace_time: "{{ django_app_docker_celery_workers_default_grace_time }}"

django_app_docker_celery_workers_enable_healthcheck: false
django_app_docker_celery_workers_healthcheck:
  test: ["CMD", "python", "/app/bin/check_celery_worker_liveness.py"]
  interval: 30s
  timeout: 5s
  retries: 3
  start_period: 10s

# Flower: a celery monitoring tool. Use safe credentials and don't share them!
django_app_docker_flower_url_prefix: _flower
django_app_docker_flower_user: flower # change this
django_app_docker_flower_password: flower # change this

#######################################
#                                     #
# Outgoing e-mail configuration       #
#                                     #
#######################################

# Main toggle, set to `true` to have other variables have any effect.
django_app_docker_mail: false

django_app_docker_mail_host: localhost # point this to the mail container service / host
django_app_docker_mail_port: "25"
django_app_docker_mail_user: ""
django_app_docker_mail_password: ""
django_app_docker_mail_use_tls: "no"
django_app_docker_mail_default_from: "{{ django_app_docker_name_prefix }}@{{ django_app_docker_domain }}"

#######################################
#                                     #
# Extra required envvars              #
#                                     #
#######################################

# Add extra arbitrary environment variables. These are added to the end of the .env
# file, and therefore override any earlier entries.
#
# Format:
#
#   django_app_docker_extra_env:
#     SOME_ENVVAR: some-value
#
django_app_docker_extra_env: {}
# Add JWT_LEEWAY envvar to .env: https://open-zaak.readthedocs.io/en/latest/installation/reference/time.html?highlight=JWT_LEEWAY#jwt-validation
django_app_docker_jwt_leeway: ""

# Add docker labels to container: https://docs.docker.com/engine/reference/commandline/run/#label
# Format:
#
#   django_app_docker_labels:
#     labelkey: labelvalue
#
django_app_docker_labels: {}
django_app_docker_celery_labels: {}
django_app_docker_celery_beat_labels: {}
django_app_docker_flower_labels: {}
django_app_docker_celery_monitor_labels: {}
django_app_docker_rabbitmq_labels: {}
django_app_docker_redis_labels: {}
django_app_docker_elasticsearch_labels: {}
# Run /app/src/manage.py setup_configuration command. Use django_app_docker_extra_env to add the correct environment variables.
django_app_docker_config_enable: false
# Ansible will wait running setup configuration until it receives this status code from 127.0.0.1:HOSTPORT
django_app_docker_setup_wait_status_code: 200
