---

kind: CronJob
apiVersion: batch/v1beta1
metadata:
  labels:
    app.kubernetes.io/name:  "{{ django_app_k8s_name_prefix }}-{{ item.name }}"
    app.kubernetes.io/instance: "{{ django_app_k8s_instance }}"
    app.kubernetes.io/version: "{{ django_app_k8s_version }}"
    app.kubernetes.io/component: cronjobs
    app.kubernetes.io/part-of: "{{ django_app_k8s_group }}"
    app.kubernetes.io/managed-by: Ansible
spec:
  schedule: "{{ item.schedule | mandatory }}"
  jobTemplate:
    spec:
      template:  # pod template
        metadata:
          labels:  # pod labels
            app.kubernetes.io/name:  "{{ django_app_k8s_name_prefix }}-{{ item.name }}"
            app.kubernetes.io/instance: "{{ django_app_k8s_instance }}"
            app.kubernetes.io/version: "{{ django_app_k8s_version }}"
            app.kubernetes.io/component: cronjobs
            app.kubernetes.io/part-of: "{{ django_app_k8s_group }}"
            app.kubernetes.io/managed-by: Ansible
          annotations: {{ django_app_k8s_job_annotations }}
        spec:

{% if django_app_k8s_pvc %}
          volumes:
            - name: storage
              persistentVolumeClaim:
                claimName: {{ django_app_k8s_name_prefix }}-storage
{% endif %}

          containers:
          - name: job
            image: {{ django_app_k8s_image }}
            imagePullPolicy: IfNotPresent

            command:
              - /bin/bash
            args:
              - '-c'
              - "python src/manage.py {{ item.managementCommand | mandatory }}"

            resources:
              requests:
                memory: "200Mi"
                cpu: "100m"
              limits:
                memory: "1Gi"
                cpu: "1000m"
            securityContext: {{ django_app_k8s_jobs_security_context }} 
                

{% if django_app_k8s_pvc %}
            volumeMounts: {{ django_app_k8s_app_volume_mounts }}
{% endif %}

            env: {{ django_app_k8s_app_env }}

          restartPolicy: OnFailure
